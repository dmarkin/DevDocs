Ember JS
+https://github.com/eoinkelly/ember-runloop-handbook
https://emberigniter.com/5-essential-ember-concepts/

Convention over configuration is an important philosphy in Ember.
Data Down, Actions Up

http://emjs.ru
https://ember-twiddle.com/
https://habrahabr.ru/post/274637/
yoember and https://library-app.firebaseapp.com/libraries - Library Example App

Templating
http://handlebarsjs.com/
Блочные (blocked) компоненты начинаются с {{#, cтрочные (inline) - с {{ (при этом не используется {{yield}})
{{partial 'someTemplate'}} - includes someTemplate.hbs to this placement
{{outlet}} - placement for deeper level content
{{yield}} - means that we can use this component as a block component;
    the code that this component wraps around will be injected inside the {{yield}}:
    {{#library-item item=model}}
      Closed
    {{/library-item}} // {{yield}} == Closed

http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_component


Очереди Ember.run.queues
// => ["sync", "actions", "routerTransitions", "render", "afterRender", "destroy"]

- Очередь sync содержит задачи по синхронизации привязок.
- Очередь actions выполняет общую работу и обычно содержит запланированные задачи, например, обещания.
- Очередь routerTransitions включает задачи по переходу в роутере.
- Очередь render содержит задачи по отображению; обычно они связаны с обновлением DOM.
- Очередь afterRender включает задачи, которые запускаются после выполнения всех предыдущих запланированных задач по отображению.
 Для сторонних библиотек, которые предназначены для работы с DOM, это зачастую хорошо,
  так как их следует запускать только после того, как все дерево DOM обновится.
- Очередь destroy содержит задачи по завершении удаления объектов, которые согласно другим задачам запланировано убрать.

run.schedule, run.scheduleOnce, run.once create a new runloop if one does not exist and that these automatically (implicitly) created runloops are called autoruns.

https://poteto.github.io/component-best-practices/#/

Addons
http://www.emberaddons.com or http://www.emberobserver.com
ember-cp-validations
ember-cli-d3

Tables
http://opensource.addepar.com/ember-table/#/overview
http://offirgolan.github.io/ember-light-table/#/
https://quantosobra.github.io/ember-data-table-light/

Pagination Example
https://github.com/toranb/ember-pagination-example

Auth
https://github.com/simplabs/ember-simple-auth

Observers will always be called when the value of the emailAddress changes, while the computed property only changes when you go and use that property.

Routes hooks (called in the below specific order)

import Ember from 'ember';
export default Ember.Route.extend({
  init() {},

  beforeModel(transition) {},

  model(params, transition) {},

  afterModel(model, transition) {},

  activate() {},

  setupController(controller, model) {},

  renderTemplate(controller, model) {}
});

Services
Когда использовать сервисы?
Поскольку сервисы - это синглтоны, то их следует использовать только в том случае,
когда у вас может быть только один экземпляр во всем приложении.
Например, корзина в интернет-магазине, лента активности, geolocation, logging, session data и Websockets и т.п.
By convention, the name of the property, which used at component, must match the name of the service being injected.
start: Ember.inject.service() // will inject service named start

action сначала ищется в контроллере, если там не определена - в роуте
Data operations (actions) belong in the route!!! [because only the owner of a certain object is allowed to manipulate it]
Если из action, определенной в контроллере, возвратить return true; --> этот action будет всплывать в route
Controllers can access other controllers using Ember.inject.controller.

Ember Events in Components
Ember events in components work by adding the name of the event as a method in the component.
Touch events: touchStart, touchMove, touchEnd, touchCancel
Keyboard events: keyDown, keyUp, keyPress
Mouse events: mouseDown, mouseUp, contextMenu, click, doubleClick, mouseMove, focusIn, focusOut, mouseEnter, mouseLeave
Form events: submit, change, focusIn, focusOut, input
HTML5 drag and drop events: dragStart, drag, dragEnter, dragLeave, dragOver, dragEnd, drop
Custom events can be registered using the Ember.Application.customEvents method.

Components
How to send actions from a parent to child component?
You can use closure actions or the send method to trigger actions from parent routes or controllers.
See Cookbook p.287

Components by default are isolated from their surroundings. Any data that the component needs must be passed in.

Initializers
// app/initializer/init

export function initialize(app) {
app.inject('component', 'start', 'service:start'); // this injects start service into all the components at the app
}

export default {
name: 'init',
initialize
};

!? Отключаем runloop для некоторых браузерных событий
/**
 * Tell Ember to stop listening for certain events. These events are very
 * frequent so they make it harder to visualise what the runloop is doing. Feel
 * free to adjust this list by adding/removing events. The full list of events
 * that Ember listens for by default is at
 * http://emberjs.com/api/classes/Ember.View.html#toc_event-names
 *
 */
Ember.Application.initializer({
  name: 'Stop listening for overly noisy mouse events',

  initialize(container, application) {
    let events = container.lookup('event_dispatcher:main').events;
    delete events.mousemove;
    delete events.mouseenter;
    delete events.mouseleave;
  }
});

Ember.js initializers are created when the application is started. It’s a good place to preload data or set up
the application state. The app argument, in the initialize function, is also known as Ember.Application.
It serves as a registry for dependency declaration. Factories (classes) can be registered and injected into the application.
The service:start is the key for the start service that we created earlier. Once a factory is registered,
it can be injected anywhere in the application. As the start service has already been created, there is no need to register it.
The app.inject takes three arguments. The first is the type to be injected. The second is the name of the service, start.
Finally, the service:start factory is created.

Dependency Injection and implementation with contextual components due to the use of the component and hash helpers
https://emberway.io/component-dependency-injection-in-ember-js-a46a39a5d30a#.dyxe54dqe

Auth
https://github.com/simplabs/ember-simple-auth#what-does-it-do
https://github.com/simplabs/ember-simple-auth/blob/master/guides/managing-current-user.md

Actions
+ http://miguelcamba.com/blog/2016/01/24/ember-closure-actions-in-depth/

<button {{action "sayHi" preventDefault=false bubble=false on="double-click"}}>Salute</button>
По умолчанию регистрирует обработчик события (указанного в on) и выполняет его при возникновении события; event передается в первом аргументе sayHi
preventDefault - по умолчанию true
bubble - по умолчанию true
on - событие, по умолчанию Click / Enter

<button onclick={{action "sayHi"}}></button>
Closure Action в качестве обработчика события
Создает функцию с замыканием, которая вызывает другую функцию. Только закрепляет (bind) текущий контекст и привязывает аргументы.
 Не создает обработчиков, не имеет preventDefault и bubble свойств.


{{my-button action=(action "sayHi")}}
Closure Action - event передается во втором(!) аргументе sayHi

Extracting values out of the first argument
<input type="text" onchange={{action "logArgs"}}> <!-- Logs `[event]` -->
<input type="text" onchange={{action "logArgs" value="target.value"}}> <!-- Logs the value of the input (e.target.input) -->
<button onclick={{action "logArgs" "abcde" value="length"}}> <!-- Logs `[5]` -->
<button onclick={{action (action "logArgs" "foo" value="length") value="screenX"}}>Press me</button> <!-- Logs `[3, 741]` -->

mut helper
<button onclick={{action (mut shipmentType) "next-day"}}>Next day delivery</button>
    is equivalent for
<button onclick={{action "selectShipmentType" "next-day"}}>Next day delivery</button>
actions: {
  selectShipmentType(type /*, e */) {
    this.set('shipmentType', type);
  }
}


Best Components Practices [https://poteto.github.io/component-best-practices]:
1. Don't declare arrays or objects directly on Components.
Instead, add them on init. This is so we can ensure that each instance of the Component has its own independent state.

2. When overrriding framework methods (or extended Component methods), call this._super(...arguments);

3. Observers make things less explicit, and are generally less performant.

5. Use closure actions

6. Follow the Data Down, Actions Up philosophy
When architecting components, always find out who owns the data.
 Only objects that "own" the data should be allowed to mutate it. In most cases, this will either be the controller or route.

7. you should not modify a component's internal or external properties inside of the {will,did}{Render,Update} hooks.
 This will cause performance degradation and potentially an infinite loop.
 Instead, use the did{init,receive,update}Attrs hooks

8. When routable components land, singleton logic will no longer live in a controller. Instead, we can move them to services.

9. Helpers are great for intermediate values and other composable bits of functionality,
 particularly when they don't require their own element.