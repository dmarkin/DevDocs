Парадигмы ООП:

- Инкапсуляция (Сокрытие типов данных, сокрытие членов структуры - модификаторы, сокрытие частей программных систем)
- Наследование
Example:
function A(type){
this.type = type;
this.x = 10;
};
A.prototype.getType = function(){return this.type};
A.prototype.getX = function(){return this.x};

function B(type){}; //Наследуем класс А используя prototype
var b = Object.create(new A()); // именно так, а не B.prototype = new A(); var b = new B('cool');
b.x // 10 - назначеное A
b.type // cool

function C(type){
    A.call(this, type);
    //При вызове С через new создается новый объект (this),
    //A назначает ему свойства x и type, но не ставит __proto__, так как не вызвана через New
};
var c = new C("cool");
c.x // 10;
c.type // cool

Наследование с помощью Object.create():
// Shape - superclass
function Shape() {
  this.x = 0;
  this.y = 0;
}

// superclass method
Shape.prototype.move = function(x, y) {
  this.x += x;
  this.y += y;
  console.info('Shape moved.');
};

// Rectangle - subclass
function Rectangle() {
  Shape.call(this); // call super constructor.
}

// subclass extends superclass
Rectangle.prototype = Object.create(Shape.prototype);
Rectangle.prototype.constructor = Rectangle;

var rect = new Rectangle();

console.log('Is rect an instance of Rectangle?',
  rect instanceof Rectangle); // true
console.log('Is rect an instance of Shape?',
  rect instanceof Shape); // true
rect.move(1, 1); // Outputs, 'Shape moved.'

- Полиморфизм
- Абстракция
- Посылка сообщений
- Повторное использование

SOLID - five basic principles of object-oriented programming and design

Single responsibility principle
    a class should have only a single responsibility (i.e. only one potential change in the software's specification should be able to affect the specification of the class)

Open/closed principle
    “software entities … should be open for extension, but closed for modification.”

Liskov substitution principle
    “objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.” See also design by contract.

Interface segregation principle
    “many client-specific interfaces are better than one general-purpose interface.”

Dependency inversion principle
    one should “Depend upon Abstractions. Do not depend upon concretions.”

Конструкторы
Which functions can be constructors - all used with new (https://css-tricks.com/understanding-javascript-constructors/)
