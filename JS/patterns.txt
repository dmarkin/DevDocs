https://github.com/nnupoor/js_designpatterns

Чистая функция
При вызове такой функции с одинаковыми параметрами, она всегда производит одинаковый результат.
Это значит, что у функции нет никаких побочных эффектов или зависимости от состояния (времени, свойств объекта, Ajax).
Такой тип функций проще для понимания, так как любые значения, влияющие на результат, передаются явно в качестве аргументов.

// Линейные структуры данных: стеки и очереди.
// Массивы в JavaScript имеют встроенную реализацию стека и очереди.
// Стек хранит данные в последовательном порядке и удаляет последние добавленные данные.

function Stack() {
    this._size = 0;
    this._storage = {};
}

Stack.prototype.push = function(data) {
    var size = ++this._size;
    this._storage[size] = data;
};

Stack.prototype.pop = function() {
    var size = this._size,
        deletedData;

    if (size) {
        deletedData = this._storage[size];

        delete this._storage[size];
        this._size--;

        return deletedData;
    }
};

// Очередь также хранит данные в последовательном порядке, но удаляет самые старые элементы.

function Queue() {
    this._oldestIndex = 1;
    this._newestIndex = 1;
    this._storage = {};
}

Queue.prototype.size = function() {
    return this._newestIndex - this._oldestIndex;
};

Queue.prototype.enqueue = function(data) {
    this._storage[this._newestIndex] = data;
    this._newestIndex++;
};

Queue.prototype.dequeue = function() {
    var oldestIndex = this._oldestIndex,
        newestIndex = this._newestIndex,
        deletedData;

    if (oldestIndex !== newestIndex) {
        deletedData = this._storage[oldestIndex];
        delete this._storage[oldestIndex];
        this._oldestIndex++;

        return deletedData;
    }
};

Односвязный список
В информатике представляет собой структуру данных, которая содержит последовательность связанных узлов.
Каждый узел содержит данные и указатель, который может указывать на другой узел.
Основные операции с односвязными списками:
Node
    data - здесь хранятся значения;
    next - указывает на следующий узел в списке.

SinglyList
    _length - извлекает количество узлов в списке;
    head - определяет узел, как головной элемент списка;
    add(value) - добавляет узел в список;
    searchNodeAt(position) - ищет в списке узел на n-ной позиции;
    remove(position) - удаляет узел из списка.

When a script uses document.write, that prevents it from being loaded asynchronously.
Many of 3rd-party scripts use it.

Каррирование (Currying)
Especially useful with more advanced functional feature - combinatorics

Обычная функция и ее вызов
var greet = function(greeting, name) {
  console.log(greeting + ", " + name);
};
greet("Hello", "Heidi"); //"Hello, Heidi"


Каррированная функция и ее вызовы
Важен порядок аргументов!
!? http://ramdajs.com/

var greetCurried = function(greeting) {
  return function(name) {
    console.log(greeting + ", " + name);
  };
};
var greetHello = greetCurried("Hello");
greetHello("Heidi"); //"Hello, Heidi"
greetHello("Eddie"); //"Hello, Eddie"
greetCurried("Hi there")("Howard"); //"Hi there, Howard"

В общем случае, пример создания и вызова каррированной функции без ()()()...-hell
// not handle all of the edge cases, such as missing or optional parameters
var curryIt = function(uncurried) {
  var parameters = Array.prototype.slice.call(arguments, 1);
  return function() {
    return uncurried.apply(this, parameters.concat(
      Array.prototype.slice.call(arguments, 0)
    ));
  };
};

var greeter = function(greeting, separator, emphasis, name) {
  console.log(greeting + separator + name + emphasis);
};
var greetHello = curryIt(greeter, "Hello", ", ", ".");
greetHello("Heidi"); //"Hello, Heidi."
greetHello("Eddie"); //"Hello, Eddie."
var greetGoodbye = curryIt(greeter, "Goodbye", ", ");
greetGoodbye(".", "Joe"); //"Goodbye, Joe."
