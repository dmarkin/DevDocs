RactiveJS
Flux — это термин, придуманный для обозначения однонаправленного потока данных с очень специфичными событиями и слушателями.
https://github.com/enaqx/awesome-react


https://facebook.github.io/flux/docs/todo-list.html
https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/
http://code.tutsplus.com/courses/build-a-microblogging-app-with-flux-and-react


1. Ваши представления отправляют события
Dispatcher по своей сути является event-системой. Он траслирует события и регистрирует колбэки. Есть только один глобальный dispatcher.

https://github.com/facebook/flux/blob/master/src/Dispatcher.js
var AppDispatcher = new Dispatcher();

2. Ваше хранилище (store) реагирует на отправленные события
Хранилище — это синглтон, а это значит, что вам можно не объявлять его через оператор new.
Ключевая концепция: Хранилище — это не модель. Хранилище содержит модели.
Ключевая концепция: Хранилище — единственная сущность в вашем приложении, которая знает как изменить данные. Это самая важная часть Flux.
Событие, которые мы послали, не знает как добавить или удалить элемент

Только хранилища регистрируют колбеки в dispatcher. Ваши представления никогда не должны вызвать AppDispatcher.register.
Dispatcher только для отправки сообщений из представлений в хранилища. Ваши представления будут реагировать на другой вид событий.

3. Ваше хранилище посылает событие „Change“
Давайте дадим нашему хранилищу возможность инициировать событие - http://notes.jetienne.com/2011/03/22/microeventjs.html
Ключевая концепция: Мы не передаем данные вместе с событием. Наше представление беспокоиться только о том, что что-то изменилось.

4. Ваше представление реагирует на событие „change“
Сейчас мы должны отобразить список. Наше представление полностью перерисуется, когда список изменится.

Конечно, мы вызываем функцию render снова и, конечно, весь код в этой функции выполняется.
Но React изменяет реальный DOM, если только результат вызова render будет отличатся от предыдущего.
Ваша функция render, на самом деле, генерирует „виртуальный DOM“, который React сравнивает с предыдущим результатом вызова
функции render. Если два виртуальных DOMа различаются, React изменит реальный DOM — и только в нужных местах.

Ключевая концепция: Когда хранилище изменяется, ваши представления не должны заботиться том, какое событие произошло:
добавление, удаление или изменение. Они должны просто полностью перерисоваться. Алгоритм сравнения „вирутального DOM“
справится с тяжелыми расчетами и изменит реальный DOM.

https://github.com/facebook/flux/tree/master/examples/flux-todomvc
state относится к компоненту, и именно state однозначно определяет, как будет отрисован компонент.
За пределы мы выносим не state, а данные, и в нужный момент просто копируем эти данные из store в state.
props - список параметров, пришедших в компонент извне (от родителя), а state - набор параметров, описывающий внутренее состояние компонента

https://scotch.io/tutorials/learning-react-getting-started-and-concepts
https://habrahabr.ru/post/249279/
